{"version":3,"file":"chatlib.min.js","sources":["../src/chatlib.js"],"sourcesContent":["var questionString;\nvar errorString;\nvar userName;\nvar assistantName;\n\nexport const init = (sourceOfTruth, user, assistant) => {\n\n    document.querySelector('#azure_openai_input').addEventListener('keyup', e => {\n        if (e.which === 13 && e.target.value !== \"\") {\n            addToChatLog('user', e.target.value);\n            createCompletion(e.target.value, sourceOfTruth);\n            e.target.value = '';\n        }\n    });\n\n    userName = user;\n    assistantName = assistant;\n\n    require(['core/str'], function(str) {\n        var strings = [\n            {\n                key: 'askaquestion',\n                component: 'block_azure_openai_chat'\n            },\n            {\n                key: 'erroroccurred',\n                component: 'block_azure_openai_chat'\n            },\n        ];\n        str.get_strings(strings).then((results) => {\n            questionString = results[0];\n            errorString = results[1];\n        });\n    });\n};\n\nconst addToChatLog = (type, message) => {\n    /**\n     * Add a message to the chat UI\n     * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n     * @param {string} message The text of the message to add\n     */\n    let messageContainer = document.querySelector('#azure_openai_chat_log');\n    messageContainer.insertAdjacentHTML('beforeend', `\n        <div class='azure_openai_message ${type}'>\n            ${message}\n        </div>\n    `);\n    messageContainer.scrollTop = messageContainer.scrollHeight;\n};\n\nconst createCompletion = (message, sourceOfTruth) => {\n    /**\n     * Makes an API request to get a completion, and adds it to the chat log\n     * @param {string} message The text to get a completion for\n     */\n    const history = buildTranscript();\n    document.querySelector('#azure_openai_input').classList.add('disabled');\n    document.querySelector('#azure_openai_input').classList.remove('error');\n    document.querySelector('#azure_openai_input').placeholder = questionString;\n    document.querySelector('#azure_openai_input').blur();\n    addToChatLog('bot loading', '...');\n\n    fetch(`${M.cfg.wwwroot}/blocks/azure_openai_chat/api/completion.php`, {\n        method: 'POST',\n        body: JSON.stringify({\n            message: message,\n            history: history,\n            sourceOfTruth: sourceOfTruth\n        })\n    })\n    .then(response => {\n        let messageContainer = document.querySelector('#azure_openai_chat_log');\n        messageContainer.removeChild(messageContainer.lastElementChild);\n        document.querySelector('#azure_openai_input').classList.remove('disabled');\n\n        if (!response.ok) {\n            throw Error(response.statusText);\n        } else {\n            return response.json();\n        }\n    })\n    .then(data => {\n        try {\n            if (data.choices[0].text) {\n                addToChatLog('bot', data.choices[0].text);\n            } else {\n                addToChatLog('bot', data.choices[0].message.content);\n            }\n        } catch (error) {\n            addToChatLog('bot', data.error.message);\n        }\n    })\n    .catch(() => {\n        document.querySelector('#azure_openai_input').classList.add('error');\n        document.querySelector('#azure_openai_input').placeholder = errorString;\n    });\n\n};\n\nconst buildTranscript = () => {\n    /**\n     * Using the existing messages in the chat history, create a string that can be used to aid completion\n     * @return {JSONObject} A transcript of the conversation up to this point\n     */\n    let transcript = [];\n    document.querySelectorAll('.azure_openai_message').forEach((message, index) => {\n        if (index === document.querySelectorAll('.azure_openai_message').length - 1) {\n            return;\n        }\n\n        let user = userName;\n        if (message.classList.contains('bot')) {\n            user = assistantName;\n        }\n        transcript.push({\"user\": user, \"message\": message.innerText});\n    });\n\n    return transcript;\n};\n"],"names":["questionString","errorString","userName","assistantName","sourceOfTruth","user","assistant","document","querySelector","addEventListener","e","which","target","value","addToChatLog","createCompletion","require","str","get_strings","key","component","then","results","type","message","messageContainer","insertAdjacentHTML","scrollTop","scrollHeight","history","buildTranscript","classList","add","remove","placeholder","blur","fetch","M","cfg","wwwroot","method","body","JSON","stringify","response","removeChild","lastElementChild","ok","json","Error","statusText","data","choices","text","content","error","catch","transcript","querySelectorAll","forEach","index","length","contains","push","innerText"],"mappings":"6EAAIA,eACAC,YACAC,SACAC,yGAEgB,CAACC,cAAeC,KAAMC,aAEtCC,SAASC,cAAc,uBAAuBC,iBAAiB,SAASC,IACpD,KAAZA,EAAEC,OAAmC,KAAnBD,EAAEE,OAAOC,QAC3BC,aAAa,OAAQJ,EAAEE,OAAOC,OAC9BE,iBAAiBL,EAAEE,OAAOC,MAAOT,eACjCM,EAAEE,OAAOC,MAAQ,OAIzBX,SAAWG,KACXF,cAAgBG,UAEhBU,QAAQ,CAAC,aAAa,SAASC,KAW3BA,IAAIC,YAVU,CACV,CACIC,IAAK,eACLC,UAAW,2BAEf,CACID,IAAK,gBACLC,UAAW,6BAGMC,MAAMC,UAC3BtB,eAAiBsB,QAAQ,GACzBrB,YAAcqB,QAAQ,gBAK5BR,aAAe,CAACS,KAAMC,eAMpBC,iBAAmBlB,SAASC,cAAc,0BAC9CiB,iBAAiBC,mBAAmB,YAAc,8CACXH,uBAC7BC,iCAGVC,iBAAiBE,UAAYF,iBAAiBG,cAG5Cb,iBAAmB,CAACS,QAASpB,uBAKzByB,QAAUC,kBAChBvB,SAASC,cAAc,uBAAuBuB,UAAUC,IAAI,YAC5DzB,SAASC,cAAc,uBAAuBuB,UAAUE,OAAO,SAC/D1B,SAASC,cAAc,uBAAuB0B,YAAclC,eAC5DO,SAASC,cAAc,uBAAuB2B,OAC9CrB,aAAa,cAAe,OAE5BsB,MAAO,GAAEC,EAAEC,IAAIC,sDAAuD,CAClEC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBnB,QAASA,QACTK,QAASA,QACTzB,cAAeA,kBAGtBiB,MAAKuB,eACEnB,iBAAmBlB,SAASC,cAAc,6BAC9CiB,iBAAiBoB,YAAYpB,iBAAiBqB,kBAC9CvC,SAASC,cAAc,uBAAuBuB,UAAUE,OAAO,YAE1DW,SAASG,UAGHH,SAASI,aAFVC,MAAML,SAASM,eAK5B7B,MAAK8B,WAEMA,KAAKC,QAAQ,GAAGC,KAChBvC,aAAa,MAAOqC,KAAKC,QAAQ,GAAGC,MAEpCvC,aAAa,MAAOqC,KAAKC,QAAQ,GAAG5B,QAAQ8B,SAElD,MAAOC,OACLzC,aAAa,MAAOqC,KAAKI,MAAM/B,aAGtCgC,OAAM,KACHjD,SAASC,cAAc,uBAAuBuB,UAAUC,IAAI,SAC5DzB,SAASC,cAAc,uBAAuB0B,YAAcjC,gBAK9D6B,gBAAkB,SAKhB2B,WAAa,UACjBlD,SAASmD,iBAAiB,yBAAyBC,SAAQ,CAACnC,QAASoC,YAC7DA,QAAUrD,SAASmD,iBAAiB,yBAAyBG,OAAS,aAItExD,KAAOH,SACPsB,QAAQO,UAAU+B,SAAS,SAC3BzD,KAAOF,eAEXsD,WAAWM,KAAK,MAAS1D,aAAiBmB,QAAQwC,eAG/CP"}